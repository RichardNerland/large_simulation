#!/usr/bin/env python
"""
Visualize the results of percentile simulations.
This script creates charts from the CSV results generated by run_percentile_simulations.py.
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import os

def load_results(csv_path='percentile_simulation_results.csv'):
    """Load the results from the CSV file."""
    if not os.path.exists(csv_path):
        print(f"Error: {csv_path} not found. Run run_percentile_simulations.py first.")
        return None
    
    df = pd.read_csv(csv_path)
    
    # Convert percentile strings to numeric values for plotting
    df['Percentile_Numeric'] = df['Percentile'].str.replace('th', '').astype(float)
    
    # Sort by percentile
    df = df.sort_values('Percentile_Numeric')
    
    return df

def plot_financial_metrics(df):
    """Plot financial metrics across percentiles."""
    plt.figure(figsize=(12, 8))
    
    # Create a plot with single y-axis
    ax1 = plt.gca()
    
    # Plot IRR on the y-axis
    ax1.plot(df['Percentile_Numeric'], df['Avg IRR (%)'], 'b-o', linewidth=2, label='Avg IRR (%)')
    ax1.fill_between(df['Percentile_Numeric'], 
                    df['Min IRR (%)'], 
                    df['Avg IRR (%)'], 
                    alpha=0.2, color='blue')
    
    # Set labels and title
    ax1.set_xlabel('Earnings Percentile', fontsize=12)
    ax1.set_ylabel('IRR (%)', color='blue', fontsize=12)
    plt.title('Financial Metrics Across Earnings Percentiles', fontsize=14)
    
    # Set x-axis ticks to the percentile values
    plt.xticks(df['Percentile_Numeric'])
    
    # Add a grid
    ax1.grid(True, linestyle='--', alpha=0.7)
    
    # Add legend
    ax1.legend(loc='upper left')
    
    plt.tight_layout()
    plt.savefig('financial_metrics.png', dpi=300)
    print("Saved financial_metrics.png")

def plot_impact_metrics(df):
    """Plot impact metrics across percentiles."""
    plt.figure(figsize=(12, 8))
    
    # Create a plot with two y-axes
    ax1 = plt.gca()
    ax2 = ax1.twinx()
    
    # Plot Earnings Gain on the left y-axis
    ax1.plot(df['Percentile_Numeric'], df['Avg Earnings Gain ($)'] / 1000, 'g-o', linewidth=2, 
             label='Avg Earnings Gain ($K)')
    ax1.fill_between(df['Percentile_Numeric'], 
                    df['Min Earnings Gain ($)'] / 1000, 
                    df['Avg Earnings Gain ($)'] / 1000, 
                    alpha=0.2, color='green')
    
    # Plot Total Utility on the right y-axis
    ax2.plot(df['Percentile_Numeric'], df['Avg Total Utility'], 'm-s', linewidth=2, 
             label='Avg Total Utility')
    ax2.fill_between(df['Percentile_Numeric'], 
                    df['Min Total Utility'], 
                    df['Avg Total Utility'], 
                    alpha=0.2, color='magenta')
    
    # Set labels and title
    ax1.set_xlabel('Earnings Percentile', fontsize=12)
    ax1.set_ylabel('Earnings Gain ($K)', color='green', fontsize=12)
    ax2.set_ylabel('Total Utility', color='magenta', fontsize=12)
    plt.title('Impact Metrics Across Earnings Percentiles', fontsize=14)
    
    # Set x-axis ticks to the percentile values
    plt.xticks(df['Percentile_Numeric'])
    
    # Add a grid
    ax1.grid(True, linestyle='--', alpha=0.7)
    
    # Add legends
    lines1, labels1 = ax1.get_legend_handles_labels()
    lines2, labels2 = ax2.get_legend_handles_labels()
    ax1.legend(lines1 + lines2, labels1 + labels2, loc='upper left')
    
    plt.tight_layout()
    plt.savefig('impact_metrics.png', dpi=300)
    print("Saved impact_metrics.png")

def plot_utility_breakdown(df):
    """Plot utility breakdown across percentiles."""
    plt.figure(figsize=(12, 8))
    
    # Plot Student Utility and Remittance Utility
    plt.plot(df['Percentile_Numeric'], df['Avg Student Utility'], 'b-o', linewidth=2, 
             label='Student Utility')
    plt.plot(df['Percentile_Numeric'], df['Avg Remittance Utility'], 'r-s', linewidth=2, 
             label='Remittance Utility')
    plt.plot(df['Percentile_Numeric'], df['Avg Total Utility'], 'g-^', linewidth=2, 
             label='Total Utility')
    
    # Fill between for uncertainty
    plt.fill_between(df['Percentile_Numeric'], 
                    df['Min Student Utility'], 
                    df['Avg Student Utility'], 
                    alpha=0.2, color='blue')
    plt.fill_between(df['Percentile_Numeric'], 
                    df['Min Remittance Utility'], 
                    df['Avg Remittance Utility'], 
                    alpha=0.2, color='red')
    plt.fill_between(df['Percentile_Numeric'], 
                    df['Min Total Utility'], 
                    df['Avg Total Utility'], 
                    alpha=0.2, color='green')
    
    # Set labels and title
    plt.xlabel('Earnings Percentile', fontsize=12)
    plt.ylabel('Utility', fontsize=12)
    plt.title('Utility Breakdown Across Earnings Percentiles', fontsize=14)
    
    # Set x-axis ticks to the percentile values
    plt.xticks(df['Percentile_Numeric'])
    
    # Add a grid
    plt.grid(True, linestyle='--', alpha=0.7)
    
    # Add legend
    plt.legend(loc='upper left')
    
    plt.tight_layout()
    plt.savefig('utility_breakdown.png', dpi=300)
    print("Saved utility_breakdown.png")

def plot_relative_performance(df):
    """Plot relative performance compared to median."""
    # Calculate relative performance compared to the 50th percentile
    median_row = df[df['Percentile_Numeric'] == 50].iloc[0]
    
    metrics = ['Avg IRR (%)', 'Avg Earnings Gain ($)', 'Avg Total Utility']
    labels = ['IRR', 'Earnings Gain', 'Total Utility']
    
    plt.figure(figsize=(12, 8))
    
    for i, (metric, label) in enumerate(zip(metrics, labels)):
        relative_values = [(row[metric] / median_row[metric] - 1) * 100 for _, row in df.iterrows()]
        plt.plot(df['Percentile_Numeric'], relative_values, marker='o', linewidth=2, label=label)
    
    # Set labels and title
    plt.xlabel('Earnings Percentile', fontsize=12)
    plt.ylabel('% Change Relative to Median (50th Percentile)', fontsize=12)
    plt.title('Relative Performance Compared to Median Scenario', fontsize=14)
    
    # Set x-axis ticks to the percentile values
    plt.xticks(df['Percentile_Numeric'])
    
    # Add a horizontal line at 0%
    plt.axhline(y=0, color='k', linestyle='--', alpha=0.5)
    
    # Add a grid
    plt.grid(True, linestyle='--', alpha=0.7)
    
    # Add legend
    plt.legend(loc='best')
    
    plt.tight_layout()
    plt.savefig('relative_performance.png', dpi=300)
    print("Saved relative_performance.png")

def main():
    """Main function to create visualizations."""
    print("Creating visualizations from percentile simulation results...")
    
    # Load results
    df = load_results()
    if df is None:
        return
    
    # Create visualizations
    plot_financial_metrics(df)
    plot_impact_metrics(df)
    plot_utility_breakdown(df)
    plot_relative_performance(df)
    
    print("\nAll visualizations created successfully!")

if __name__ == "__main__":
    main() 